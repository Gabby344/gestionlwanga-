// Remarque : Assurez-vous que l'initialisation de Firebase (incluant firestore)
// a √©t√© faite au pr√©alable dans un fichier comme 'config.js' et que 'firebase' est disponible.
// Exemple : const firebase = require('firebase/app'); ... firebase.initializeApp(config);

// --- 1. INITIALISATION ET CONSTANTES ---

// R√©f√©rence Firestore.
// L'utilisation de 'getFirestore()' est la meilleure pratique pour le SDK v9+ (modular).
// Si vous utilisez l'ancienne version, conservez : const db = firebase.firestore();
const db = firebase.firestore(); 
const BATCH_SIZE = 500; // Taille maximale des op√©rations par lots

/**
 * R√¥les et permissions (Permissions bas√©es sur les modules/fonctionnalit√©s).
 * Utilisation de minuscules et snake_case pour les cl√©s de BDD.
 */
const INITIAL_ROLES = {
    // üëë Pr√©fet (Direction G√©n√©rale)
    prefet: {
        description: "Direction G√©n√©rale et supervision de l'√©tablissement.",
        permissions: [
            "gestion_globale_acces", "gestion_comptes_total", "rapports_suivi", 
            "configurations_systeme", "vue_structures"
        ]
    },
    // üìö Directeur des √âtudes
    directeur_etudes: {
        description: "Gestion acad√©mique, classes et corps professoral.",
        permissions: [
            "gestion_classes", "gestion_enseignants", "suivi_programmes", 
            "planification_academique", "bulletins_validation"
        ]
    },
    // üëÆ Directeur de Discipline
    directeur_discipline: {
        description: "Gestion de la vie scolaire et disciplinaire.",
        permissions: [
            "suivi_disciplinaire", "gestion_sanctions", "rapport_comportement", 
            "coordination_surveillants", "vue_eleves"
        ]
    },
    // üìù Secr√©taire
    secretaire: {
        description: "Gestion administrative, inscriptions et documentation.",
        permissions: [
            "inscription_eleves", "gestion_documents", "planning_scolaire_vue", 
            "communication_interne", "fiche_eleve_creation"
        ]
    },
    // üí∞ Econome
    econome: {
        description: "Gestion financi√®re de l'√©tablissement.",
        permissions: [
            "gestion_financiere", "suivi_paiements", "rapport_tresorerie", 
            "budget_depenses", "config_frais"
        ]
    }
};

/**
 * Utilisateurs administratifs initiaux (pour l'amor√ßage de la BDD).
 */
const INITIAL_ADMINS = [
    {
        uid: "user_gabby", // ID court et coh√©rent (potentiellement l'UID Firebase apr√®s cr√©ation)
        nom: "Gabby Umba",
        email: "gabby@ecole.com",
        role: "prefet",
        statut: "actif"
    },
    {
        uid: "user_michel",
        nom: "P√®re Michel Lembe Sds",
        email: "prefet@ecole.com",
        role: "prefet",
        statut: "actif"
    },
    // ... Ajoutez les autres utilisateurs ici pour garder la liste compl√®te
];

/**
 * Classes scolaires initiales.
 */
const INITIAL_CLASSES = [
    "7eme EB", "8eme EB",
    "1ere Scientifique", "2eme Scientifique", "3eme Scientifique", "4eme Scientifique",
    "1ere Commerciale et Gestion", "2eme Commerciale et Gestion", "3eme Commerciale et Gestion", "4eme Commerciale et Gestion",
    "1ere Agronomie", "2eme Agronomie", "3eme Agronomie", "4eme Agronomie",
    "1ere P√©dagogie G√©n√©rale", "2eme P√©dagogie G√©n√©rale", "3eme P√©dagogie G√©n√©rale", "4eme P√©dagogie G√©n√©rale"
];

// --- 2. FONCTION PRINCIPALE ---

/**
 * Ex√©cute la configuration initiale de la base de donn√©es Firestore.
 * Utilise des transactions par lots pour une ex√©cution atomique et plus rapide.
 */
async function configInitiale() {
    console.log("üü° D√©but de la configuration initiale de Firestore...");
    const timestamp = firebase.firestore.FieldValue.serverTimestamp(); // Meilleure pratique : utiliser le timestamp du serveur

    try {
        // --- √âTAPE 1 : CR√âATION DES R√îLES ET PERMISSIONS ---
        let batch = db.batch();
        let count = 0;
        
        for (const [role, data] of Object.entries(INITIAL_ROLES)) {
            const docRef = db.collection("roles").doc(role);
            batch.set(docRef, {
                ...data,
                createdAt: timestamp
            });
            count++;

            // Commit du lot si la limite est atteinte (pour les grandes configurations)
            if (count % BATCH_SIZE === 0) {
                await batch.commit();
                batch = db.batch();
                console.log(`... ${count} r√¥les √©crits.`);
            }
        }
        
        // Commit des r√¥les restants
        await batch.commit();
        console.log("‚úÖ √âtape 1 : R√¥les et Permissions cr√©√©s.");

        // --- √âTAPE 2 : CR√âATION DES UTILISATEURS ADMINISTRATIFS ---
        batch = db.batch();
        count = 0;

        for (const admin of INITIAL_ADMINS) {
            // Note importante : L'authentification Firebase (email/password) DOIT √™tre g√©r√©e s√©par√©ment
            // sur le backend (Cloud Functions/Node.js) pour des raisons de s√©curit√©.
            // Ce code ajoute uniquement le profil dans la collection 'users'.
            const docRef = db.collection("users").doc(admin.uid); 
            batch.set(docRef, {
                nom: admin.nom,
                email: admin.email,
                role: admin.role,
                statut: admin.statut,
                createdAt: timestamp
            });
            count++;
             if (count % BATCH_SIZE === 0) {
                await batch.commit();
                batch = db.batch();
            }
        }

        // Commit des utilisateurs restants
        await batch.commit();
        console.log("‚úÖ √âtape 2 : Utilisateurs administratifs initialis√©s.");

        // --- √âTAPE 3 : CR√âATION DES CLASSES ---
        batch = db.batch();
        count = 0;
        
        for (let i = 0; i < INITIAL_CLASSES.length; i++) {
            const nom = INITIAL_CLASSES[i];
            const [niveau, ...specialiteParts] = nom.split(" ");
            const specialite = specialiteParts.join(" ") || "G√©n√©rale"; // G√®re les classes sans sp√©cialit√©
            
            // Utiliser des ID simples si possible, sinon un ID bas√© sur le nom est plus lisible
            const docId = nom.toLowerCase().replace(/[.\s]+/g, "_");

            const docRef = db.collection("classes").doc(docId);
            batch.set(docRef, {
                nom,
                niveau,
                specialite,
                effectif_eleves: 0, // Utiliser un champ de comptage
                enseignants_assignes: [],
                createdAt: timestamp
            });
            count++;
             if (count % BATCH_SIZE === 0) {
                await batch.commit();
                batch = db.batch();
            }
        }

        // Commit des classes restantes
        await batch.commit();
        console.log("‚úÖ √âtape 3 : Classes cr√©√©es.");

        // --- √âTAPE 4 : CR√âATION DES M√âTADONN√âES GLOBALES (Optionnel mais Propre) ---
        // Cette √©tape est facultative mais permet d'avoir des collections de r√©f√©rence bien d√©finies.
        await db.collection("meta").doc("last_setup").set({
            timestamp: timestamp,
            version: "1.0.0"
        });
        
        console.log("üéâ Configuration Firestore termin√©e avec succ√®s !");

    } catch (error) {
        console.error("‚ùå Erreur lors de la configuration initiale de Firestore:", error);
        // Vous pouvez ajouter ici une logique pour g√©rer la tentative de r√©ex√©cution
    }
}

// Lancement de la fonction d'initialisation
configInitiale();
